# üìä EJERCICIO 08-08 EJERCICIO 3: ORGANIZADOR GR√ÅFICO
# Fundamentos de Machine Learning con Scikit-Learn y PyTorch

import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyBboxPatch
import numpy as np

print("üìä EJERCICIO 3: ORGANIZADOR GR√ÅFICO DE ML")
print("=" * 50)

# ============================================================================
# PARTE 1: DEFINICIONES FUNDAMENTALES üìö
# ============================================================================

print("\nüìö PARTE 1: CONCEPTOS FUNDAMENTALES")
print("-" * 50)

conceptos_fundamentales = {
    "ü§ñ Machine Learning": {
        "definicion": "Campo de la inteligencia artificial que permite a las computadoras aprender sin ser programadas expl√≠citamente",
        "objetivo": "Crear sistemas que mejoren autom√°ticamente con la experiencia",
        "aplicaciones": ["Reconocimiento de im√°genes", "Procesamiento de lenguaje", "Predicciones", "Recomendaciones"]
    },
    "üîß Scikit-Learn": {
        "definicion": "Biblioteca de Python para Machine Learning tradicional",
        "caracteristicas": ["F√°cil de usar", "Algoritmos cl√°sicos", "Ideal para principiantes", "Bien documentada"],
        "algoritmos": ["Regresi√≥n Lineal", "√Årboles de Decisi√≥n", "SVM", "K-Means", "Random Forest"]
    },
    "üß† PyTorch": {
        "definicion": "Framework de Python para Deep Learning y Redes Neuronales",
        "caracteristicas": ["Flexible", "Din√°mico", "Ideal para investigaci√≥n", "Redes neuronales complejas"],
        "aplicaciones": ["Visi√≥n por computadora", "NLP", "Redes neuronales", "Deep Learning"]
    }
}

for concepto, info in conceptos_fundamentales.items():
    print(f"\n{concepto}")
    print(f"   üìñ Definici√≥n: {info['definicion']}")
    if 'objetivo' in info:
        print(f"   üéØ Objetivo: {info['objetivo']}")
    if 'caracteristicas' in info:
        print(f"   ‚ú® Caracter√≠sticas: {', '.join(info['caracteristicas'])}")
    if 'algoritmos' in info:
        print(f"   üîß Algoritmos: {', '.join(info['algoritmos'])}")
    if 'aplicaciones' in info:
        print(f"   üåü Aplicaciones: {', '.join(info['aplicaciones'])}")

# ============================================================================
# PARTE 2: TIPOS DE APRENDIZAJE DETALLADOS üéØ
# ============================================================================

print("\n" + "=" * 60)
print("üéØ PARTE 2: TIPOS DE APRENDIZAJE MACHINE LEARNING")
print("=" * 60)

tipos_aprendizaje = {
    "üéØ APRENDIZAJE SUPERVISADO": {
        "definicion": "Aprende con datos etiquetados (entrada ‚Üí salida conocida)",
        "caracteristicas": [
            "Necesita ejemplos con respuestas correctas",
            "Predice resultados espec√≠ficos",
            "Se puede medir la precisi√≥n",
            "Ideal para clasificaci√≥n y regresi√≥n"
        ],
        "algoritmos_sklearn": ["LinearRegression", "DecisionTreeClassifier", "RandomForestClassifier", "SVM"],
        "algoritmos_pytorch": ["Neural Networks", "CNN", "RNN", "Transformer"],
        "ejemplos_reales": [
            "Email spam vs no spam",
            "Reconocimiento de im√°genes",
            "Predicci√≥n de precios",
            "Diagn√≥stico m√©dico"
        ],
        "cuando_usar": "Cuando tienes datos hist√≥ricos con resultados conocidos"
    },
    "üîç APRENDIZAJE NO SUPERVISADO": {
        "definicion": "Encuentra patrones ocultos en datos sin etiquetas",
        "caracteristicas": [
            "No necesita respuestas correctas",
            "Descubre estructuras ocultas",
            "Agrupa datos similares",
            "Explora y analiza datos"
        ],
        "algoritmos_sklearn": ["KMeans", "DBSCAN", "PCA", "IsolationForest"],
        "algoritmos_pytorch": ["Autoencoders", "VAE", "GAN", "Self-supervised learning"],
        "ejemplos_reales": [
            "Segmentaci√≥n de clientes",
            "Detecci√≥n de anomal√≠as",
            "Reducci√≥n de dimensionalidad",
            "Sistemas de recomendaci√≥n"
        ],
        "cuando_usar": "Cuando quieres explorar datos y encontrar patrones desconocidos"
    },
    "üß† REDES NEURONALES": {
        "definicion": "Modelos inspirados en el cerebro humano para problemas complejos",
        "caracteristicas": [
            "M√∫ltiples capas de procesamiento",
            "Aprende representaciones autom√°ticamente",
            "Muy poderoso con grandes datasets",
            "Requiere m√°s recursos computacionales"
        ],
        "algoritmos_sklearn": ["MLPClassifier", "MLPRegressor"],
        "algoritmos_pytorch": ["Linear", "Conv2d", "LSTM", "Transformer", "ResNet"],
        "ejemplos_reales": [
            "Reconocimiento facial",
            "Traducci√≥n autom√°tica",
            "Generaci√≥n de im√°genes",
            "Procesamiento de voz"
        ],
        "cuando_usar": "Para problemas muy complejos con grandes cantidades de datos"
    }
}

for tipo, info in tipos_aprendizaje.items():
    print(f"\n{tipo}")
    print(f"   üìñ Definici√≥n: {info['definicion']}")
    print(f"   ‚ú® Caracter√≠sticas:")
    for caracteristica in info['caracteristicas']:
        print(f"      ‚Ä¢ {caracteristica}")
    print(f"   üîß Algoritmos Scikit-Learn: {', '.join(info['algoritmos_sklearn'])}")
    print(f"   üß† Algoritmos PyTorch: {', '.join(info['algoritmos_pytorch'])}")
    print(f"   üåü Ejemplos reales:")
    for ejemplo in info['ejemplos_reales']:
        print(f"      ‚Ä¢ {ejemplo}")
    print(f"   üéØ Cu√°ndo usar: {info['cuando_usar']}")

# ============================================================================
# PARTE 3: COMPARACI√ìN SCIKIT-LEARN VS PYTORCH üîßüß†
# ============================================================================

print("\n" + "=" * 60)
print("üîßüß† PARTE 3: SCIKIT-LEARN VS PYTORCH")
print("=" * 60)

comparacion = {
    "üîß SCIKIT-LEARN": {
        "fortalezas": [
            "F√°cil de aprender y usar",
            "Algoritmos cl√°sicos bien implementados",
            "Excelente documentaci√≥n",
            "Ideal para principiantes",
            "R√°pido para prototipos"
        ],
        "limitaciones": [
            "No soporta redes neuronales complejas",
            "Limitado para deep learning",
            "No usa GPU autom√°ticamente",
            "Menos flexible para investigaci√≥n"
        ],
        "mejor_para": [
            "Proyectos de ML tradicional",
            "An√°lisis de datos tabulares",
            "Prototipado r√°pido",
            "Aprendizaje de ML b√°sico"
        ],
        "ejemplo_codigo": """
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Datos
X = [[peso, textura], ...]
y = [tipo_fruta, ...]

# Entrenar
modelo = DecisionTreeClassifier()
modelo.fit(X, y)

# Predecir
prediccion = modelo.predict([[160, 0]])
        """
    },
    "üß† PYTORCH": {
        "fortalezas": [
            "Muy flexible y din√°mico",
            "Excelente para deep learning",
            "Soporte completo para GPU",
            "Ideal para investigaci√≥n",
            "Comunidad activa"
        ],
        "limitaciones": [
            "Curva de aprendizaje m√°s alta",
            "Requiere m√°s c√≥digo",
            "M√°s complejo para principiantes",
            "Necesita m√°s recursos"
        ],
        "mejor_para": [
            "Deep learning y redes neuronales",
            "Investigaci√≥n en IA",
            "Proyectos complejos",
            "Aplicaciones de producci√≥n escalables"
        ],
        "ejemplo_codigo": """
import torch
import torch.nn as nn

# Definir red neuronal
class RedNeuronal(nn.Module):
    def __init__(self):
        super().__init__()
        self.linear = nn.Linear(2, 1)
    
    def forward(self, x):
        return torch.sigmoid(self.linear(x))

# Entrenar
modelo = RedNeuronal()
# ... c√≥digo de entrenamiento
        """
    }
}

for herramienta, info in comparacion.items():
    print(f"\n{herramienta}")
    print(f"   ‚úÖ Fortalezas:")
    for fortaleza in info['fortalezas']:
        print(f"      ‚Ä¢ {fortaleza}")
    print(f"   ‚ö†Ô∏è  Limitaciones:")
    for limitacion in info['limitaciones']:
        print(f"      ‚Ä¢ {limitacion}")
    print(f"   üéØ Mejor para:")
    for uso in info['mejor_para']:
        print(f"      ‚Ä¢ {uso}")
    print(f"   üíª Ejemplo de c√≥digo:")
    print(f"{info['ejemplo_codigo']}")

# ============================================================================
# PARTE 4: PRINCIPALES APLICACIONES POR CATEGOR√çA üåü
# ============================================================================

print("\n" + "=" * 60)
print("üåü PARTE 4: PRINCIPALES APLICACIONES")
print("=" * 60)

aplicaciones_por_categoria = {
    "üñºÔ∏è VISI√ìN POR COMPUTADORA": {
        "descripcion": "Procesamiento y an√°lisis de im√°genes",
        "sklearn_algoritmos": ["SVM", "Random Forest", "KMeans (para segmentaci√≥n)"],
        "pytorch_algoritmos": ["CNN", "ResNet", "YOLO", "U-Net"],
        "ejemplos": [
            "Google Lens - Reconocimiento de objetos",
            "Instagram - Filtros faciales",
            "Tesla - Detecci√≥n de obst√°culos",
            "Medicina - An√°lisis de rayos X"
        ]
    },
    "üó£Ô∏è PROCESAMIENTO DE LENGUAJE NATURAL": {
        "descripcion": "Comprensi√≥n y generaci√≥n de texto",
        "sklearn_algoritmos": ["Naive Bayes", "SVM", "TF-IDF"],
        "pytorch_algoritmos": ["LSTM", "Transformer", "BERT", "GPT"],
        "ejemplos": [
            "ChatGPT - Generaci√≥n de texto",
            "Google Translate - Traducci√≥n",
            "Siri/Alexa - Comprensi√≥n de voz",
            "Gmail - Detecci√≥n de spam"
        ]
    },
    "üìä AN√ÅLISIS PREDICTIVO": {
        "descripcion": "Predicci√≥n de valores futuros",
        "sklearn_algoritmos": ["Linear Regression", "Random Forest", "Gradient Boosting"],
        "pytorch_algoritmos": ["LSTM", "Neural Networks", "Time Series Models"],
        "ejemplos": [
            "Netflix - Predicci√≥n de gustos",
            "Amazon - Precios din√°micos",
            "Bancos - An√°lisis de riesgo",
            "Meteorolog√≠a - Predicci√≥n del clima"
        ]
    },
    "üéÆ SISTEMAS INTELIGENTES": {
        "descripcion": "Agentes que toman decisiones",
        "sklearn_algoritmos": ["Decision Trees", "Ensemble Methods"],
        "pytorch_algoritmos": ["Reinforcement Learning", "Deep Q-Networks"],
        "ejemplos": [
            "AlphaGo - Juegos estrat√©gicos",
            "Tesla Autopilot - Conducci√≥n",
            "Videojuegos - NPCs inteligentes",
            "Trading - Algoritmos financieros"
        ]
    }
}

for categoria, info in aplicaciones_por_categoria.items():
    print(f"\n{categoria}")
    print(f"   üìñ Descripci√≥n: {info['descripcion']}")
    print(f"   üîß Algoritmos Scikit-Learn: {', '.join(info['sklearn_algoritmos'])}")
    print(f"   üß† Algoritmos PyTorch: {', '.join(info['pytorch_algoritmos'])}")
    print(f"   üåü Ejemplos reales:")
    for ejemplo in info['ejemplos']:
        print(f"      ‚Ä¢ {ejemplo}")

# ============================================================================
# PARTE 5: ORGANIZADOR GR√ÅFICO VISUAL üìä
# ============================================================================

print("\n" + "=" * 60)
print("üìä PARTE 5: GENERANDO ORGANIZADOR GR√ÅFICO VISUAL")
print("=" * 60)

def crear_organizador_grafico():
    """Crear un organizador gr√°fico visual de Machine Learning"""
    
    fig, ax = plt.subplots(1, 1, figsize=(16, 12))
    fig.suptitle('üìä ORGANIZADOR GR√ÅFICO: FUNDAMENTOS DE MACHINE LEARNING', 
                 fontsize=18, fontweight='bold', y=0.95)
    
    # Colores para diferentes secciones
    colores = {
        'ml': '#3498DB',
        'sklearn': '#E74C3C', 
        'pytorch': '#9B59B6',
        'supervisado': '#27AE60',
        'no_supervisado': '#F39C12',
        'redes': '#E67E22'
    }
    
    # T√≠tulo central - Machine Learning
    ax.add_patch(FancyBboxPatch((0.35, 0.85), 0.3, 0.1, 
                                boxstyle="round,pad=0.02", 
                                facecolor=colores['ml'], alpha=0.8))
    ax.text(0.5, 0.9, 'ü§ñ MACHINE LEARNING', ha='center', va='center', 
            fontsize=16, fontweight='bold', color='white')
    
    # Herramientas principales
    # Scikit-Learn
    ax.add_patch(FancyBboxPatch((0.05, 0.7), 0.25, 0.08, 
                                boxstyle="round,pad=0.02", 
                                facecolor=colores['sklearn'], alpha=0.8))
    ax.text(0.175, 0.74, 'üîß SCIKIT-LEARN', ha='center', va='center', 
            fontsize=12, fontweight='bold', color='white')
    ax.text(0.175, 0.68, 'ML Tradicional', ha='center', va='center', 
            fontsize=10, style='italic')
    
    # PyTorch
    ax.add_patch(FancyBboxPatch((0.7, 0.7), 0.25, 0.08, 
                                boxstyle="round,pad=0.02", 
                                facecolor=colores['pytorch'], alpha=0.8))
    ax.text(0.825, 0.74, 'üß† PYTORCH', ha='center', va='center', 
            fontsize=12, fontweight='bold', color='white')
    ax.text(0.825, 0.68, 'Deep Learning', ha='center', va='center', 
            fontsize=10, style='italic')
    
    # Tipos de aprendizaje
    # Supervisado
    ax.add_patch(FancyBboxPatch((0.05, 0.5), 0.25, 0.12, 
                                boxstyle="round,pad=0.02", 
                                facecolor=colores['supervisado'], alpha=0.8))
    ax.text(0.175, 0.58, 'üéØ SUPERVISADO', ha='center', va='center', 
            fontsize=11, fontweight='bold', color='white')
    ax.text(0.175, 0.54, 'Con etiquetas', ha='center', va='center', 
            fontsize=9, color='white')
    ax.text(0.175, 0.51, 'Clasificaci√≥n\nRegresi√≥n', ha='center', va='center', 
            fontsize=8, color='white')
    
    # No Supervisado
    ax.add_patch(FancyBboxPatch((0.375, 0.5), 0.25, 0.12, 
                                boxstyle="round,pad=0.02", 
                                facecolor=colores['no_supervisado'], alpha=0.8))
    ax.text(0.5, 0.58, 'üîç NO SUPERVISADO', ha='center', va='center', 
            fontsize=11, fontweight='bold', color='white')
    ax.text(0.5, 0.54, 'Sin etiquetas', ha='center', va='center', 
            fontsize=9, color='white')
    ax.text(0.5, 0.51, 'Clustering\nReducci√≥n', ha='center', va='center', 
            fontsize=8, color='white')
    
    # Redes Neuronales
    ax.add_patch(FancyBboxPatch((0.7, 0.5), 0.25, 0.12, 
                                boxstyle="round,pad=0.02", 
                                facecolor=colores['redes'], alpha=0.8))
    ax.text(0.825, 0.58, 'üß† REDES NEURONALES', ha='center', va='center', 
            fontsize=11, fontweight='bold', color='white')
    ax.text(0.825, 0.54, 'Problemas complejos', ha='center', va='center', 
            fontsize=9, color='white')
    ax.text(0.825, 0.51, 'Deep Learning\nCNN, RNN', ha='center', va='center', 
            fontsize=8, color='white')
    
    # Aplicaciones principales
    aplicaciones = [
        ('üì± Google Lens', 0.1, 0.3),
        ('üó£Ô∏è Siri/Alexa', 0.3, 0.3),
        ('üöó Tesla', 0.5, 0.3),
        ('üé¨ Netflix', 0.7, 0.3),
        ('üåç Translate', 0.9, 0.3)
    ]
    
    for app, x, y in aplicaciones:
        ax.add_patch(FancyBboxPatch((x-0.08, y-0.03), 0.16, 0.06, 
                                    boxstyle="round,pad=0.01", 
                                    facecolor='lightblue', alpha=0.7))
        ax.text(x, y, app, ha='center', va='center', 
                fontsize=9, fontweight='bold')
    
    # Algoritmos principales
    ax.text(0.175, 0.15, 'Algoritmos Scikit-Learn:', ha='center', va='center', 
            fontsize=11, fontweight='bold')
    ax.text(0.175, 0.11, '‚Ä¢ DecisionTree\n‚Ä¢ RandomForest\n‚Ä¢ SVM\n‚Ä¢ KMeans', 
            ha='center', va='center', fontsize=9)
    
    ax.text(0.825, 0.15, 'Algoritmos PyTorch:', ha='center', va='center', 
            fontsize=11, fontweight='bold')
    ax.text(0.825, 0.11, '‚Ä¢ Neural Networks\n‚Ä¢ CNN\n‚Ä¢ LSTM\n‚Ä¢ Transformer', 
            ha='center', va='center', fontsize=9)
    
    # Conectores (l√≠neas)
    # ML central a herramientas
    ax.plot([0.4, 0.3], [0.85, 0.74], 'k-', alpha=0.3, linewidth=2)
    ax.plot([0.6, 0.7], [0.85, 0.74], 'k-', alpha=0.3, linewidth=2)
    
    # Herramientas a tipos de aprendizaje
    ax.plot([0.175, 0.175], [0.7, 0.62], 'k-', alpha=0.3, linewidth=1)
    ax.plot([0.175, 0.5], [0.62, 0.62], 'k-', alpha=0.3, linewidth=1)
    ax.plot([0.5, 0.825], [0.62, 0.62], 'k-', alpha=0.3, linewidth=1)
    
    # Tipos a aplicaciones
    for _, x, _ in aplicaciones:
        ax.plot([0.5, x], [0.5, 0.33], 'k-', alpha=0.2, linewidth=1)
    
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.axis('off')
    
    plt.tight_layout()
    plt.show()

print("Creando organizador gr√°fico visual...")
crear_organizador_grafico()

# ============================================================================
# PARTE 6: RESUMEN Y CONCLUSIONES üéì
# ============================================================================

print("\n" + "=" * 60)
print("üéì PARTE 6: RESUMEN Y CONCLUSIONES")
print("=" * 60)

print("\n‚úÖ CONCEPTOS CLAVE APRENDIDOS:")
print("   1. ü§ñ Machine Learning: Sistemas que aprenden autom√°ticamente")
print("   2. üîß Scikit-Learn: Herramienta ideal para ML tradicional")
print("   3. üß† PyTorch: Framework poderoso para Deep Learning")
print("   4. üéØ Supervisado: Aprende con ejemplos etiquetados")
print("   5. üîç No Supervisado: Encuentra patrones ocultos")
print("   6. üß† Redes Neuronales: Para problemas muy complejos")

print("\nüéØ CU√ÅNDO USAR CADA HERRAMIENTA:")
print("   üìä Usa Scikit-Learn cuando:")
print("      ‚Ä¢ Eres principiante en ML")
print("      ‚Ä¢ Trabajas con datos tabulares")
print("      ‚Ä¢ Necesitas prototipos r√°pidos")
print("      ‚Ä¢ Usas algoritmos cl√°sicos")
print("   ")
print("   üß† Usa PyTorch cuando:")
print("      ‚Ä¢ Trabajas con im√°genes, audio o texto")
print("      ‚Ä¢ Necesitas redes neuronales complejas")
print("      ‚Ä¢ Haces investigaci√≥n en IA")
print("      ‚Ä¢ Requieres m√°xima flexibilidad")

print("\nüåü APLICACIONES EN LA VIDA REAL:")
print("   ‚Ä¢ Cada app que usas tiene ML incorporado")
print("   ‚Ä¢ Desde recomendaciones hasta reconocimiento de voz")
print("   ‚Ä¢ La elecci√≥n de herramienta depende del problema")
print("   ‚Ä¢ Ambas herramientas son complementarias")

print("\nüöÄ PR√ìXIMOS PASOS:")
print("   ‚Ä¢ Practica con proyectos simples en Scikit-Learn")
print("   ‚Ä¢ Explora PyTorch cuando te sientas c√≥modo")
print("   ‚Ä¢ Combina ambas herramientas seg√∫n el proyecto")
print("   ‚Ä¢ Mantente actualizado con nuevas t√©cnicas")

print("\n" + "=" * 60)
print("üèÅ FIN DEL ORGANIZADOR GR√ÅFICO")
print("¬°Ahora tienes una visi√≥n completa de ML! üéì")
print("=" * 60)