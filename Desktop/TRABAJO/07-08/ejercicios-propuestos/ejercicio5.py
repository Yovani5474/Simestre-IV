# ============================================================================
# EJERCICIO PROPUESTO 5: REDES NEURONALES - CONCEPTOS Y VISUALIZACI√ìN
# ============================================================================
# Objetivo: Investigaci√≥n completa sobre redes neuronales con simulaci√≥n visual

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Circle, FancyBboxPatch
import matplotlib.patches as mpatches

# ============================================================================
# 1. CONFIGURACI√ìN INICIAL Y CONCEPTOS FUNDAMENTALES
# ============================================================================

print("=" * 80)
print("üß† EJERCICIO 5: REDES NEURONALES - CONCEPTOS Y VISUALIZACI√ìN")
print("=" * 80)

print("\nüìñ 1.1 DEFINICI√ìN ORIGINAL (PROPORCIONADA):")
print("-" * 50)
print("   'Las redes neuronales son modelos inspirados en el cerebro humano.")
print("   Aprenden a resolver tareas como clasificaci√≥n o predicci√≥n a trav√©s")
print("   de capas de 'neuronas' artificiales. Estas redes ajustan sus")
print("   conexiones (pesos) para dar mejores respuestas cada vez que ven m√°s datos.'")

print("\nüß† 1.2 AN√ÅLISIS Y RESPUESTAS CON MIS PROPIAS PALABRAS:")
print("-" * 60)

print("\n‚ùì PREGUNTA 1: ¬øQu√© imita una red neuronal?")
print("   üìù RESPUESTA:")
print("   ‚Üí Imita el funcionamiento del cerebro humano y su sistema nervioso.")
print("   ‚Üí Como el cerebro procesa informaci√≥n mediante conexiones entre neuronas,")
print("     la red artificial utiliza 'neuronas matem√°ticas' interconectadas.")
print("   ‚Üí Cada conexi√≥n tiene un 'peso' que determina la importancia de esa informaci√≥n.")
print("   ‚Üí Es una simulaci√≥n simplificada de c√≥mo pensamos y aprendemos.")

print("\n‚ùì PREGUNTA 2: ¬øQu√© hacen las capas?")
print("   üìù RESPUESTA:")
print("   ‚Üí Las capas procesan informaci√≥n paso a paso, como una l√≠nea de producci√≥n.")
print("   ‚Üí CAPA DE ENTRADA: Recibe datos iniciales (edad, ingresos, educaci√≥n)")
print("   ‚Üí CAPAS OCULTAS: Procesan y transforman informaci√≥n, detectando patrones")
print("   ‚Üí CAPA DE SALIDA: Produce la respuesta final (s√≠/no, precio, categor√≠a)")
print("   ‚Üí Cada capa extrae caracter√≠sticas m√°s complejas que la anterior.")

print("\n‚ùì PREGUNTA 3: ¬øC√≥mo aprenden las redes neuronales?")
print("   üìù RESPUESTA:")
print("   ‚Üí Aprenden mediante repetici√≥n y correcci√≥n de errores, como un estudiante.")
print("   ‚Üí PROCESO DE APRENDIZAJE:")
print("     1Ô∏è‚É£ Hacen una predicci√≥n inicial (generalmente incorrecta)")
print("     2Ô∏è‚É£ Comparan su respuesta con la respuesta correcta conocida")
print("     3Ô∏è‚É£ Ajustan los 'pesos' de las conexiones para reducir el error")
print("     4Ô∏è‚É£ Repiten este proceso miles de veces hasta ser precisas")
print("   ‚Üí Es como practicar un instrumento: mejoras con la pr√°ctica constante.")

# ============================================================================
# 2. EJEMPLO PR√ÅCTICO: SISTEMA DE APROBACI√ìN DE CR√âDITO
# ============================================================================

print(f"\n" + "="*80)
print("üí≥ 2. EJEMPLO PR√ÅCTICO: RED NEURONAL PARA APROBACI√ìN DE CR√âDITO")
print("="*80)

print("\nüè¶ 2.1 DESCRIPCI√ìN DEL PROBLEMA:")
print("   ‚Ä¢ Una empresa necesita decidir si otorgar cr√©ditos autom√°ticamente")
print("   ‚Ä¢ Variables de entrada: Edad, Ingresos, Nivel educativo")
print("   ‚Ä¢ Salida deseada: Aprobar (1) o Rechazar (0) el cr√©dito")

print("\nüß† 2.2 ARQUITECTURA DE LA RED NEURONAL:")
print("   ‚Ä¢ CAPA DE ENTRADA: 3 neuronas (edad, ingresos, educaci√≥n)")
print("   ‚Ä¢ CAPA OCULTA: 4 neuronas (procesan combinaciones de datos)")
print("   ‚Ä¢ CAPA DE SALIDA: 1 neurona (decisi√≥n final: s√≠/no)")

print("\nüìä 2.3 EJEMPLO DE FUNCIONAMIENTO:")
print("   Supongamos que llega esta solicitud:")
print("   ‚Ä¢ Edad: 35 a√±os")
print("   ‚Ä¢ Ingresos: $50,000 anuales")
print("   ‚Ä¢ Educaci√≥n: Universitaria (nivel 3)")

print("\nüîÑ 2.4 PROCESO PASO A PASO:")
print("   1Ô∏è‚É£ ENTRADA: [35, 50000, 3] ‚Üí Capa de entrada")
print("   2Ô∏è‚É£ PROCESAMIENTO: Las 4 neuronas ocultas analizan:")
print("      ‚Ä¢ Neurona 1: Eval√∫a estabilidad econ√≥mica")
print("      ‚Ä¢ Neurona 2: Analiza perfil de riesgo por edad")
print("      ‚Ä¢ Neurona 3: Considera nivel educativo")
print("      ‚Ä¢ Neurona 4: Combina todos los factores")
print("   3Ô∏è‚É£ SALIDA: Neurona final decide ‚Üí 'S√ç, otorgar cr√©dito' (0.85)")

# ============================================================================
# 3. VISUALIZACI√ìN AVANZADA DE LA RED NEURONAL
# ============================================================================

print(f"\nüìä 3.1 GENERANDO VISUALIZACI√ìN INTERACTIVA...")

# Configuraci√≥n de colores profesionales
colors = {
    'input': '#3498DB',      # Azul para entrada
    'hidden': '#27AE60',     # Verde para capa oculta
    'output': '#E74C3C',     # Rojo para salida
    'connection': '#95A5A6', # Gris para conexiones
    'text': '#2C3E50',       # Azul oscuro para texto
    'background': '#ECF0F1'  # Gris claro para fondo
}
# ============================================================================

print("\n\nüé® 2.1 VISUALIZACI√ìN DE RED NEURONAL:")
print("-" * 50)
print("Generando diagrama de red neuronal simple...")

def crear_red_neuronal_profesional():
    """
    Funci√≥n para crear una visualizaci√≥n profesional de red neuronal
    Arquitectura: 3 entradas ‚Üí 4 neuronas ocultas ‚Üí 1 salida
    """
    # 4.1 Configuraci√≥n de la figura
    fig, ax = plt.subplots(1, 1, figsize=(16, 10))
    fig.suptitle('üß† EJERCICIO 5: VISUALIZACI√ìN DE RED NEURONAL PARA APROBACI√ìN DE CR√âDITO', 
                 fontsize=16, fontweight='bold', y=0.95, color=colors['text'])
    
    # Posiciones de las neuronas (ordenadas)
    # Capa de entrada (3 neuronas)
    entrada_y = [0.75, 0.5, 0.25]
    entrada_x = [0.15] * 3
    entrada_labels = ['Edad', 'Ingresos', 'Educaci√≥n']
    
    # Capa oculta (4 neuronas)
    oculta_y = [0.8, 0.6, 0.4, 0.2]
    oculta_x = [0.5] * 4
    
    # Capa de salida (1 neurona)
    salida_y = [0.5]
    salida_x = [0.85]
    
    # 2.1 Dibujar conexiones (l√≠neas)
    np.random.seed(42)  # Para consistencia
    for i, (x1, y1) in enumerate(zip(entrada_x, entrada_y)):
        for j, (x2, y2) in enumerate(zip(oculta_x, oculta_y)):
            # Variar grosor de l√≠nea para simular diferentes pesos
            peso = np.random.uniform(0.5, 2.5)
            alpha = np.random.uniform(0.3, 0.8)
            ax.plot([x1, x2], [y1, y2], color=colors['conexion'], 
                   alpha=alpha, linewidth=peso)
    
    for i, (x1, y1) in enumerate(zip(oculta_x, oculta_y)):
        for j, (x2, y2) in enumerate(zip(salida_x, salida_y)):
            peso = np.random.uniform(0.5, 2.5)
            alpha = np.random.uniform(0.3, 0.8)
            ax.plot([x1, x2], [y1, y2], color=colors['conexion'], 
                   alpha=alpha, linewidth=peso)
    
    # 2.2 Dibujar neuronas (c√≠rculos)
    # Capa de entrada
    for i, (x, y) in enumerate(zip(entrada_x, entrada_y)):
        circle = plt.Circle((x, y), 0.06, color=colors['entrada'], 
                          ec='white', linewidth=3, zorder=5)
        ax.add_patch(circle)
        # Etiquetas de entrada
        ax.text(x-0.12, y, entrada_labels[i], fontsize=11, ha='right', va='center',
               fontweight='bold', color=colors['texto'])
    
    # Capa oculta
    for i, (x, y) in enumerate(zip(oculta_x, oculta_y)):
        circle = plt.Circle((x, y), 0.06, color=colors['oculta'], 
                          ec='white', linewidth=3, zorder=5)
        ax.add_patch(circle)
        # N√∫meros de neuronas ocultas
        ax.text(x, y, f'{i+1}', fontsize=10, ha='center', va='center',
               fontweight='bold', color='white')
    
    # Capa de salida
    for i, (x, y) in enumerate(zip(salida_x, salida_y)):
        circle = plt.Circle((x, y), 0.06, color=colors['salida'], 
                          ec='white', linewidth=3, zorder=5)
        ax.add_patch(circle)
        # Etiqueta de salida
        ax.text(x+0.12, y, '¬øOtorgar\nCr√©dito?', fontsize=11, ha='left', va='center',
               fontweight='bold', color=colors['texto'])
    
    # 2.3 T√≠tulos de capas (ordenados)
    ax.text(0.15, 0.95, 'CAPA DE ENTRADA\n(3 entradas)', fontsize=12, ha='center', 
            fontweight='bold', color=colors['texto'],
            bbox=dict(boxstyle="round,pad=0.5", facecolor=colors['entrada'], alpha=0.7))
    
    ax.text(0.5, 0.95, 'CAPA OCULTA\n(4 neuronas)', fontsize=12, ha='center',
            fontweight='bold', color=colors['texto'],
            bbox=dict(boxstyle="round,pad=0.5", facecolor=colors['oculta'], alpha=0.7))
    
    ax.text(0.85, 0.95, 'CAPA DE SALIDA\n(1 salida)', fontsize=12, ha='center',
            fontweight='bold', color=colors['texto'],
            bbox=dict(boxstyle="round,pad=0.5", facecolor=colors['salida'], alpha=0.7))
    
    # 2.4 Configuraci√≥n del gr√°fico
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_aspect('equal')
    ax.axis('off')
    ax.set_title('RED NEURONAL SIMPLE - SISTEMA DE APROBACI√ìN DE CR√âDITO', 
                fontsize=16, fontweight='bold', pad=20, color=colors['texto'])
    

    
    plt.tight_layout()
    plt.show()

# 4.2 Ejecutar la visualizaci√≥n
crear_red_neuronal_profesional()

# ============================================================================
# 5. SIMULACI√ìN PR√ÅCTICA DEL FUNCIONAMIENTO
# ============================================================================

print(f"\n" + "="*80)
print("üíº 5. SIMULACI√ìN PR√ÅCTICA: PROCESAMIENTO DE UNA SOLICITUD")
print("="*80)

print("\nüè¶ 5.1 CASO DE ESTUDIO:")
print("   Una persona solicita un cr√©dito con estos datos:")
print("   ‚Ä¢ Edad: 35 a√±os")
print("   ‚Ä¢ Ingresos: $50,000 anuales")
print("   ‚Ä¢ Educaci√≥n: Universitaria (nivel 3)")

print("\nüîÑ 5.2 PROCESAMIENTO PASO A PASO:")
print("   1Ô∏è‚É£ ENTRADA: Los datos [35, 50000, 3] ingresan a la red")
print("   2Ô∏è‚É£ CAPA OCULTA: Las 4 neuronas procesan:")
print("      ‚Ä¢ Neurona 1: Eval√∫a estabilidad econ√≥mica ‚Üí 0.8")
print("      ‚Ä¢ Neurona 2: Analiza perfil de riesgo por edad ‚Üí 0.7")
print("      ‚Ä¢ Neurona 3: Considera nivel educativo ‚Üí 0.9")
print("      ‚Ä¢ Neurona 4: Combina todos los factores ‚Üí 0.85")
print("   3Ô∏è‚É£ SALIDA: Neurona final combina resultados ‚Üí 0.82")
print("   4Ô∏è‚É£ DECISI√ìN: Como 0.82 > 0.5 ‚Üí 'S√ç, OTORGAR CR√âDITO'")

# ============================================================================
# 6. VENTAJAS Y APLICACIONES EN EL MUNDO REAL
# ============================================================================

print(f"\n" + "="*80)
print("‚≠ê 6. VENTAJAS Y APLICACIONES DE LAS REDES NEURONALES")
print("="*80)

print("\nüöÄ 6.1 VENTAJAS PRINCIPALES:")
print("   ‚úÖ Aprenden patrones complejos autom√°ticamente")
print("   ‚úÖ Se adaptan a nuevos datos sin reprogramaci√≥n")
print("   ‚úÖ Manejan grandes vol√∫menes de informaci√≥n")
print("   ‚úÖ Resuelven problemas que otros algoritmos no pueden")
print("   ‚úÖ No requieren reglas programadas manualmente")
print("   ‚úÖ Mejoran su rendimiento con m√°s datos")

print("\nüåç 6.2 APLICACIONES REALES ACTUALES:")
print("   üñºÔ∏è  Reconocimiento de im√°genes (fotos, diagn√≥sticos m√©dicos)")
print("   üó£Ô∏è  Procesamiento de lenguaje (chatbots, traducci√≥n autom√°tica)")
print("   üì∫ Sistemas de recomendaci√≥n (Netflix, YouTube, Spotify)")
print("   üè• Diagn√≥stico m√©dico automatizado (c√°ncer, COVID-19)")
print("   üöó Veh√≠culos aut√≥nomos (Tesla, Google)")
print("   üí≥ Detecci√≥n de fraudes bancarios")
print("   üå§Ô∏è  Predicci√≥n meteorol√≥gica avanzada")
print("   üéÆ Inteligencia artificial en videojuegos")

print("\nüîÆ 6.3 FUTURO DE LAS REDES NEURONALES:")
print("   ‚Ä¢ Medicina personalizada")
print("   ‚Ä¢ Robots m√°s inteligentes")
print("   ‚Ä¢ Asistentes virtuales avanzados")
print("   ‚Ä¢ Automatizaci√≥n industrial completa")

print("\nüî¨ 4.3 TIPOS DE REDES NEURONALES:")
print("-" * 35)
print("‚Ä¢ Perceptr√≥n: La m√°s simple (1 capa)")
print("‚Ä¢ Multicapa: Varias capas ocultas (como nuestro ejemplo)")
print("‚Ä¢ Convolucionales: Para im√°genes")
print("‚Ä¢ Recurrentes: Para secuencias (texto, tiempo)")
print("‚Ä¢ Generativas: Para crear contenido nuevo")

# ============================================================================
# 5. RESUMEN FINAL Y CONCLUSIONES
# ============================================================================

print("\n\nüìã 5. RESUMEN FINAL:")
print("-" * 30)

print("\nüéØ 5.1 CONCEPTOS CLAVE APRENDIDOS:")
print("   ‚Ä¢ Las redes neuronales imitan el cerebro humano")
print("   ‚Ä¢ Aprenden por repetici√≥n y correcci√≥n de errores")
print("   ‚Ä¢ Cada capa procesa informaci√≥n m√°s compleja")
print("   ‚Ä¢ Son muy poderosas para patrones complejos")
print("   ‚Ä¢ Requieren muchos datos para entrenar bien")

print("\nüí° 5.2 DIFERENCIAS CON OTROS ALGORITMOS:")
print("   ‚Ä¢ M√°s flexibles que regresi√≥n lineal")
print("   ‚Ä¢ Pueden encontrar relaciones no lineales")
print("   ‚Ä¢ Necesitan m√°s datos que algoritmos simples")
print("   ‚Ä¢ Son 'cajas negras' (dif√≠ciles de interpretar)")

print("\nüîÆ 5.3 FUTURO DE LAS REDES NEURONALES:")
print("   ‚Ä¢ Inteligencia artificial m√°s avanzada")
print("   ‚Ä¢ Automatizaci√≥n de tareas complejas")
print("   ‚Ä¢ Soluci√≥n de problemas antes imposibles")
print("   ‚Ä¢ Integraci√≥n en la vida cotidiana")

print("\n‚úÖ 5.4 RECOMENDACIONES PARA APRENDER M√ÅS:")
print("   ‚Ä¢ Practicar con frameworks como TensorFlow o PyTorch")
print("   ‚Ä¢ Estudiar diferentes arquitecturas de redes")
print("   ‚Ä¢ Experimentar con datasets reales")
print("   ‚Ä¢ Mantenerse actualizado con avances en IA")
print("   ‚Ä¢ Entender cu√°ndo usar redes neuronales vs otros algoritmos")

print("\nüéì 5.5 CONEXI√ìN CON EJERCICIOS ANTERIORES:")
print("   ‚Ä¢ Ejercicio 1-2: Problemas que redes neuronales pueden resolver")
print("   ‚Ä¢ Ejercicio 3: Clustering tambi√©n puede hacerse con redes")
print("   ‚Ä¢ Ejercicio 4: Redes neuronales son aprendizaje supervisado")
print("   ‚Ä¢ Las redes son una evoluci√≥n natural de algoritmos simples")

print("\n" + "=" * 80)
print("üèÅ FIN DEL EJERCICIO 5")
print("=" * 80)