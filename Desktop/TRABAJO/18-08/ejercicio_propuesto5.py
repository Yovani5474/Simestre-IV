
import matplotlib.pyplot as plt
import string
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.probability import FreqDist
from collections import Counter
from typing import List, Dict

# Descargar recursos necesarios
try:
    nltk.data.find('tokenizers/punkt_tab')
except LookupError:
    nltk.download('punkt_tab')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

def limpiar_y_analizar_comentarios(comentarios: List[str]) -> Dict:
    """
    Limpia y analiza una lista de comentarios de redes sociales
    
    Args:
        comentarios (List[str]): Lista de comentarios a analizar
        
    Returns:
        Dict: Diccionario con resultados del an√°lisis
    """
    # Obtener stopwords en espa√±ol
    stop_words = set(stopwords.words('spanish'))
    
    # Agregar palabras comunes de redes sociales a stopwords
    stop_words_extra = {'jaja', 'jeje', 'jiji', 'wow', 'omg', 'xd', 'lol', 'rt', 'dm', 'like', 'follow'}
    stop_words.update(stop_words_extra)
    
    # Combinar todos los comentarios
    texto_completo = ' '.join(comentarios)
    
    # Tokenizaci√≥n
    tokens = word_tokenize(texto_completo.lower())
    
    # Limpiar tokens (eliminar stopwords, puntuaci√≥n y palabras muy cortas)
    tokens_limpios = [w for w in tokens if w not in stop_words 
                     and w not in string.punctuation 
                     and len(w) > 2 
                     and w.isalpha()]
    
    # Calcular frecuencias
    fdist = FreqDist(tokens_limpios)
    
    return {
        'tokens_originales': len(tokens),
        'tokens_limpios': len(tokens_limpios),
        'palabras_unicas': len(fdist),
        'fdist': fdist,
        'top_palabras': fdist.most_common(10)
    }

def crear_grafico_comentarios(top_palabras, titulo="Palabras M√°s Repetidas"):
    """
    Crea un gr√°fico de barras para comentarios de redes sociales
    
    Args:
        top_palabras: Lista de tuplas (palabra, frecuencia)
        titulo (str): T√≠tulo del gr√°fico
    """
    if not top_palabras:
        print("No hay datos para graficar")
        return
    
    palabras, frecuencias = zip(*top_palabras)
    
    # Crear gr√°fico espectacular estilo redes sociales
    fig, ax = plt.subplots(figsize=(16, 10))
    fig.patch.set_facecolor('#0f0f23')
    ax.set_facecolor('#1a1a2e')
    
    # Colores tema ATARDECER C√ÅLIDO
    colores = ['#dc2626', '#ea580c', '#d97706', '#ca8a04', '#eab308', 
               '#f59e0b', '#f97316', '#ef4444', '#fb7185', '#f472b6']
    
    barras = ax.bar(palabras, frecuencias, 
                   color=colores[:len(palabras)],
                   edgecolor='white',
                   linewidth=2,
                   alpha=0.9)
    
    # T√≠tulo espectacular
    ax.set_title(f"üåÖ {titulo} üåÖ", 
                fontsize=24, fontweight='bold', color='#FFA500', 
                pad=20, bbox=dict(boxstyle="round,pad=0.5", facecolor='#451a03', 
                edgecolor='#FFA500', linewidth=2, alpha=0.9))
    
    # Ejes personalizados
    ax.set_xlabel('üî§ PALABRAS', fontsize=16, fontweight='bold', color='white')
    ax.set_ylabel('üìä FRECUENCIA', fontsize=16, fontweight='bold', color='white')
    
    # Configurar etiquetas
    ax.set_xticks(range(len(palabras)))
    ax.set_xticklabels(palabras, rotation=45, ha='right', 
                      fontsize=12, fontweight='bold', color='white')
    ax.tick_params(axis='y', colors='white', labelsize=12)
    
    # Agregar valores encima de las barras
    for i, (barra, freq) in enumerate(zip(barras, frecuencias)):
        ax.text(barra.get_x() + barra.get_width()/2, barra.get_height() + 0.1,
                str(freq), ha='center', va='bottom', fontweight='bold', fontsize=12,
                color='white', bbox=dict(boxstyle="round,pad=0.3", facecolor=colores[i], alpha=0.7))
    
    # Grid y bordes espectaculares
    ax.grid(axis='y', alpha=0.3, linestyle='--', color='white')
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_color('white')
    ax.spines['left'].set_color('white')
    
    plt.tight_layout()
    plt.show()

def main():
    """Funci√≥n principal del ejercicio"""
    
    # Comentarios de redes sociales sobre un restaurante
    comentarios_restaurante = [
        "¬°La comida estuvo incre√≠ble! El servicio fue excelente y el ambiente muy acogedor. Definitivamente regresar√©.",
        "Ped√≠ la pizza margherita y estaba deliciosa. Los ingredientes frescos se notaban mucho. Recomendado 100%.",
        "El lugar est√° muy bonito pero la comida tard√≥ mucho en llegar. El sabor estuvo bien pero nada extraordinario.",
        "Excelente atenci√≥n al cliente. La pasta carbonara estaba perfecta y el postre de chocolate incre√≠ble.",
        "Los precios son un poco altos pero la calidad de la comida lo vale. El ambiente es perfecto para una cita.",
        "No me gust√≥ para nada. La comida estaba fr√≠a y el servicio muy lento. No lo recomiendo.",
        "¬°Qu√© lugar tan maravilloso! La comida italiana aut√©ntica y el personal muy amable. Volver√© pronto.",
        "La pizza estaba buena pero esperaba m√°s por el precio. El lugar es bonito eso s√≠.",
        "Incre√≠ble experiencia gastron√≥mica. Cada plato estaba delicioso y la presentaci√≥n impecable.",
        "El servicio fue r√°pido y la comida deliciosa. Me encant√≥ el tiramis√∫ de postre."
    ]
    
    # Rese√±as de productos (smartphone)
    resenas_producto = [
        "Este tel√©fono es incre√≠ble. La c√°mara toma fotos espectaculares y la bater√≠a dura todo el d√≠a.",
        "Excelente relaci√≥n calidad-precio. El rendimiento es muy bueno y el dise√±o elegante.",
        "La pantalla se ve hermosa y los colores son muy v√≠vidos. Recomiendo este smartphone.",
        "Tuve problemas con la bater√≠a desde el primer d√≠a. El tel√©fono se calienta mucho.",
        "La c√°mara nocturna es impresionante. Las fotos salen muy n√≠tidas incluso con poca luz.",
        "El sistema operativo es muy fluido y las aplicaciones corren sin problemas.",
        "No me gust√≥ el dise√±o. Se siente muy pesado y la pantalla se raya f√°cilmente.",
        "Excelente compra. La velocidad de procesamiento es incre√≠ble y la memoria suficiente.",
        "La calidad de construcci√≥n es muy buena. Se siente premium en las manos.",
        "Problemas con el software. Se cuelga frecuentemente y la bater√≠a se agota r√°pido."
    ]
    
    print("=== EJERCICIO PROPUESTO 5: AN√ÅLISIS DE COMENTARIOS Y RESE√ëAS ===\n")
    
    # An√°lisis de comentarios de restaurante
    print("üçï AN√ÅLISIS DE COMENTARIOS DE RESTAURANTE:")
    print("=" * 50)
    
    resultados_restaurante = limpiar_y_analizar_comentarios(comentarios_restaurante)
    
    print(f"üìä Estad√≠sticas:")
    print(f"  ‚Ä¢ Total de tokens: {resultados_restaurante['tokens_originales']}")
    print(f"  ‚Ä¢ Tokens limpios: {resultados_restaurante['tokens_limpios']}")
    print(f"  ‚Ä¢ Palabras √∫nicas: {resultados_restaurante['palabras_unicas']}")
    
    print(f"\nüèÜ Top 10 palabras m√°s repetidas:")
    for i, (palabra, freq) in enumerate(resultados_restaurante['top_palabras'], 1):
        porcentaje = (freq / resultados_restaurante['tokens_limpios']) * 100
        print(f"  {i:2d}. '{palabra}' - {freq} veces ({porcentaje:.1f}%)")
    
    # An√°lisis de rese√±as de producto
    print(f"\n\nüì± AN√ÅLISIS DE RESE√ëAS DE SMARTPHONE:")
    print("=" * 50)
    
    resultados_producto = limpiar_y_analizar_comentarios(resenas_producto)
    
    print(f"üìä Estad√≠sticas:")
    print(f"  ‚Ä¢ Total de tokens: {resultados_producto['tokens_originales']}")
    print(f"  ‚Ä¢ Tokens limpios: {resultados_producto['tokens_limpios']}")
    print(f"  ‚Ä¢ Palabras √∫nicas: {resultados_producto['palabras_unicas']}")
    
    print(f"\nüèÜ Top 10 palabras m√°s repetidas:")
    for i, (palabra, freq) in enumerate(resultados_producto['top_palabras'], 1):
        porcentaje = (freq / resultados_producto['tokens_limpios']) * 100
        print(f"  {i:2d}. '{palabra}' - {freq} veces ({porcentaje:.1f}%)")
    
    # Crear visualizaciones
    print(f"\nüìà GENERANDO VISUALIZACIONES...")
    
    print("Gr√°fico 1: Comentarios de Restaurante")
    crear_grafico_comentarios(resultados_restaurante['top_palabras'], 
                            "Top 10 Palabras - Comentarios de Restaurante")
    
    print("Gr√°fico 2: Rese√±as de Smartphone")
    crear_grafico_comentarios(resultados_producto['top_palabras'], 
                            "Top 10 Palabras - Rese√±as de Smartphone")
    
    print("‚úÖ An√°lisis de comentarios y rese√±as completado!")

if __name__ == "__main__":
    main()